package lk.sugaapps.smartharvest.data.repo;

import android.hardware.Sensor;
import android.hardware.SensorEvent;
import android.hardware.SensorEventListener;
import android.hardware.SensorManager;

import androidx.lifecycle.LiveData;
import androidx.lifecycle.MutableLiveData;

import javax.inject.Inject;
import javax.inject.Singleton;

@Singleton
public class CropAdvisorRepository implements SensorEventListener {
    private final MutableLiveData<Integer> luxData = new MutableLiveData<>();
    private final MutableLiveData<String> cropAdvice = new MutableLiveData<>();

    private final SensorManager sensorManager;
    private final Sensor lightSensor;

    @Inject
    public CropAdvisorRepository(SensorManager sensorManager, Sensor lightSensor) {
        this.sensorManager = sensorManager;
        this.lightSensor = lightSensor;
        luxData.setValue(0);
        cropAdvice.setValue("‚òÄÔ∏è Waiting for light reading...");
        registerSensor();
    }

    private void registerSensor() {
        if (lightSensor != null) {
            sensorManager.registerListener(this, lightSensor, SensorManager.SENSOR_DELAY_NORMAL);
        }
    }

    @Override
    public void onSensorChanged(SensorEvent event) {
        int lux = (int) event.values[0];
        updateLuxValue(lux);
    }

    @Override
    public void onAccuracyChanged(Sensor sensor, int accuracy) {}

    public void updateLuxValue(int lux) {
        luxData.setValue(lux);
        cropAdvice.setValue(getAdvice(lux));
    }

    public LiveData<Integer> getLuxData() {
        return luxData;
    }

    public LiveData<String> getCropAdvice() {
        return cropAdvice;
    }
    public static String getAdvice(int lux) {
        if (lux < 8000) {
            return "üîÖ Low sunlight ‚Äî not suitable\n" +
                    "‡Æï‡ØÅ‡Æ±‡Øà‡Æ®‡Øç‡Æ§ ‡Æí‡Æ≥‡Æø ‚Äî ‡Æ™‡Øä‡Æ∞‡ØÅ‡Æ§‡Øç‡Æ§‡ÆÆ‡Æ±‡Øç‡Æ±‡Æ§‡ØÅ\n" +
                    "‡∂ë‡∑Ö‡∑í‡∂∫ ‡∂Ö‡∂©‡∑î‡∂∫‡∑í ‚Äî ‡∑Ä‡∂ú‡∑è‡∑Ä‡∂ß ‡∑É‡∑î‡∂Ø‡∑î‡∑É‡∑î ‡∂±‡∑ê‡∑Ñ‡∑ê";
        } else if (lux <= 15000) {
            return "üå± Good for Beans\n" +
                    "Beans ‡Æµ‡Æ≥‡Æ∞‡Øç‡Æï‡Øç‡Æï ‡Æ®‡Æ≤‡Øç‡Æ≤ ‡Æ®‡Øá‡Æ∞‡ÆÆ‡Øç\n" +
                    "Beans ‡∑Ä‡∂ú‡∑è‡∑Ä‡∂ß ‡∑Ñ‡∑ú‡∂≥‡∂∫‡∑í";
        } else if (lux <= 20000) {
            return "ü•¨ Ideal for Cabbage\n" +
                    "Cabbage ‡Æï‡Øç‡Æï‡ØÅ ‡Æö‡Æ∞‡Æø‡ÆØ‡Ææ‡Æ© ‡Æí‡Æ≥‡Æø\n" +
                    "Cabbage ‡∑Ä‡∂Ω‡∂ß ‡∑Ñ‡∑ú‡∂≥ ‡∂ë‡∑Ö‡∑í‡∂∫";
        } else if (lux <= 25000) {
            return "ü•ï Best for Carrots\n" +
                    "Carrot ‡Æµ‡Æ≥‡Æ∞‡Øç‡Æï‡Øç‡Æï ‡Æö‡Æø‡Æ±‡Æ®‡Øç‡Æ§ ‡Æ®‡Øá‡Æ∞‡ÆÆ‡Øç\n" +
                    "Carrot ‡∑Ä‡∂ú‡∑è‡∑Ä‡∂ß ‡∑É‡∑î‡∂Ø‡∑î‡∑É‡∑î";
        } else if (lux <= 30000) {
            return "üçÖüçÜ Tomato & Brinjal thrive\n" +
                    "Tomato & Kathirikai ‡Æâ‡Æï‡Æ®‡Øç‡Æ§‡Æ§‡ØÅ\n" +
                    "Tomato ‡∑Ñ‡∑è Brinjal ‡∑Ä‡∂ú‡∑è‡∑Ä‡∂ß ‡∑Ñ‡∑ú‡∂≥‡∂∫‡∑í";
        } else if (lux <= 35000) {
            return "üå∂Ô∏è Good for Green Chilli\n" +
                    "Green Chilli ‡Æï‡Øç‡Æï‡ØÅ ‡Æâ‡Æï‡Æ®‡Øç‡Æ§‡Æ§‡ØÅ\n" +
                    "Green Chilli ‡∑Ä‡∂ú‡∑è‡∑Ä‡∂ß ‡∑É‡∑î‡∂Ø‡∑î‡∑É‡∑î";
        } else {
            return "‚òÄÔ∏è Too much sunlight ‚Äî use shade\n" +
                    "‡ÆÖ‡Æ§‡Æø‡Æï ‡Æí‡Æ≥‡Æø ‚Äî ‡Æ®‡Æø‡Æ¥‡Æ≤‡Øç ‡Æµ‡Æ≤‡Øà ‡Æ™‡ÆØ‡Æ©‡Øç‡Æ™‡Æü‡ØÅ‡Æ§‡Øç‡Æ§‡Æµ‡ØÅ‡ÆÆ‡Øç\n" +
                    "‡∂ë‡∑Ö‡∑í‡∂∫ ‡∑Ä‡∑ê‡∂©‡∑í‡∂∫‡∑í ‚Äî ‡∂≠‡∑è‡∂¥ ‡∂Ü‡∑Ä‡∂ª‡∂´ ‡∂∑‡∑è‡∑Ä‡∑í‡∂≠ ‡∂ö‡∂ª‡∂±‡∑ä‡∂±";
        }
    }
}